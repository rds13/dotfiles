#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname $)"
DOTFILES_ROOT="$(pwd)"
set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

check_sshconfig () {
  proceed=true
  if ! [ -d ~/.ssh ] || ( [ -d ~/.ssh ] && ! [ -f ~/.ssh/id_rsa ] && ! [ -f ~/.ssh/id_dsa ] )
  then
    proceed=false
    user "You probably would like to install your SSH keys before proceeding. Do you want to proceed anyway [Y|N] ?"
    read -n 1 action
    case "$action" in
      y )
        proceed=true;;
      Y )
        proceed=true;;
      * )
        ;;
    esac
  fi
  if [ "$proceed" != "true" ]
  then
    fail "Stoping bootstrap installation."
  fi
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [[ "$OSTYPE" =~ ^darwin ]]
    then
      git_credential='osxkeychain'
    fi

    if [ -z "$AUTHORNAME" ]
    then
      user ' - What is your github author name?'
      read -e git_authorname
    else
      git_authorname="$AUTHORNAME"
    fi
    # Even if variable is empty we use it if it exists
    if env | grep -q ^AUTHOREMAIL=
    then
      git_authoremail="$AUTHOREMAIL"
    else
      user ' - What is your github author email?'
      read -e git_authoremail
    fi

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=true
  backup_all=false
  skip_all=false

  for source in "$(pwd)" `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

if [ ! -d git ] ;
then
  fail "You should be launching script from 'dotfiles' dir with ./script/bootstrap"
fi
check_sshconfig
setup_gitconfig
install_dotfiles

echo ''
echo '  All installed!'
